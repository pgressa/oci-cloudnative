name: Java CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
env:
  JAVA: '11'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project-path: [
            'api',
            'carts',
            'catalogue',
            'events',
            'fulfillment',
            'functions/newsletter-subscription',
            'orders',
            'payment',
            'user'
        ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2.1.4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA }}
      - name: Build with Gradle
        if: hashFiles('src/${{ matrix.project-path }}/gradlew') != ''
        working-directory: src/${{ matrix.project-path }}
        run: |
          ./gradlew check --no-daemon  --continue
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
      - name: Build with Maven
        if: hashFiles('src/${{ matrix.project-path }}/mvnw') != ''
        working-directory: src/${{ matrix.project-path }}
        run: |
          ./mvnw test --no-transfer-progress
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
  push-docker-images:
    if: success() && github.event_name == 'push'
    needs: build
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        project-path: [
            'api',
            'carts',
            'catalogue',
            'events',
            'fulfillment',
            'functions/newsletter-subscription',
            'orders',
            'payment',
            'user'
        ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2.1.4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: ${{ env.JAVA }}
      - name: Login to OCIR
        uses: docker/login-action@v1
        with:
          registry: iad.ocir.io
          username: ${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_TOKEN }}
          logout: false
      - name: Gradle - push docker image GraalVM
        if: hashFiles('src/${{ matrix.project-path }}/gradlew') != ''
        working-directory: src/${{ matrix.project-path }}
        run: ./gradlew dockerPush --no-daemon
      - name: Gradle - push docker image OpenJdk
        if: hashFiles('src/${{ matrix.project-path }}/gradlew') != ''
        working-directory: src/${{ matrix.project-path }}
        run: ./gradlew dockerPush -PjavaBaseImage=openjdk --no-daemon
      - name: Gradle - push docker image GraalVM Native Image
        if: hashFiles('src/${{ matrix.project-path }}/gradlew') != ''
        working-directory: src/${{ matrix.project-path }}
        run: ./gradlew dockerPushNative --no-daemon
      - name: Maven - push docker image GraalVM
        if: hashFiles('src/${{ matrix.project-path }}/mvnw') != ''
        working-directory: src/${{ matrix.project-path }}
        run: ./mvnw deploy -Dpackaging=docker -Djib.from.image=ghcr.io/graalvm/graalvm-ce:java11-21.1.0 -Ddocker.image.suffix=graalvm --no-transfer-progress
      - name: Maven - push docker image OpenJdk
        if: hashFiles('src/${{ matrix.project-path }}/mvnw') != ''
        working-directory: src/${{ matrix.project-path }}
        run: ./mvnw deploy -Dpackaging=docker --no-transfer-progress
      - name: Maven - push docker image GraalVM Native Image
        if: hashFiles('src/${{ matrix.project-path }}/mvnw') != ''
        working-directory: src/${{ matrix.project-path }}
        run: ./mvnw deploy -Dpackaging=docker-native -Ddocker.image.suffix=native --no-transfer-progress -Pgraalvm
